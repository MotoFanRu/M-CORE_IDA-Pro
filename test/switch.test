    switch (((code - 0x0000) & 0xf000) >> 12) {
    case 0x0000: {
      switch (((code - 0x0000) & 0xff00) >> 8) {
      case 0x0000: {
        switch (((code - 0x0000) & 0xfff0) >> 4) {
        case 0x0000: {
          switch (((code - 0x0000) & 0xfffc) >> 2) {
          case 0x0000: {
            switch (((code - 0x0000) & 0xffff) >> 0) {
            case 0x0000: {
              // bkpt
              cmd.itype = mcore_bkpt;
              return 2;
            } break;
            case 0x0001: {
              // sync
              cmd.itype = mcore_sync;
              return 2;
            } break;
            case 0x0002: {
              // rte
              cmd.itype = mcore_rte;
              return 2;
            } break;
            case 0x0003: {
              // rfi
              cmd.itype = mcore_rfi;
              return 2;
            } break;
            default: return 0;
            } // switch (((code - 0x0000) & 0xffff) >> 0)
          } break;
          case 0x0001: {
            switch (((code - 0x0004) & 0xffff) >> 0) {
            case 0x0000: {
              // stop
              cmd.itype = mcore_stop;
              return 2;
            } break;
            case 0x0001: {
              // wait
              cmd.itype = mcore_wait;
              return 2;
            } break;
            case 0x0002: {
              // doze
              cmd.itype = mcore_doze;
              return 2;
            } break;
            default: return 0;
            } // switch (((code - 0x0004) & 0xffff) >> 0)
          } break;
          case 0x0002: {
            // trap
            make_i(cmd.Op1, ((code&0x0003)>>0));
            cmd.itype = mcore_trap;
            return 2;
          } break;
          default: return 0;
          } // switch (((code - 0x0000) & 0xfffc) >> 2)
        } break;
        case 0x0001: {
          // mvc
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_mvc;
          return 2;
        } break;
        case 0x0003: {
          // mvcv
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_mvcv;
          return 2;
        } break;
        case 0x0004: {
          // ldq
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_ldq;
          return 2;
        } break;
        case 0x0005: {
          // stq
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_stq;
          return 2;
        } break;
        case 0x0006: {
          // ldm
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_ldm;
          return 2;
        } break;
        case 0x0007: {
          // stm
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_stm;
          return 2;
        } break;
        case 0x0008: {
          // dect
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_dect;
          return 2;
        } break;
        case 0x0009: {
          // decf
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_decf;
          return 2;
        } break;
        case 0x000a: {
          // inct
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_inct;
          return 2;
        } break;
        case 0x000c: {
          // jmp
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_jmp;
          return 2;
        } break;
        case 0x000d: {
          // jsr
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_jsr;
          return 2;
        } break;
        case 0x000e: {
          // ff1
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_ff1;
          return 2;
        } break;
        case 0x000f: {
          // brev
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_brev;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x0000) & 0xfff0) >> 4)
      } break;
      case 0x0001: {
        switch (((code - 0x0100) & 0xfff0) >> 4) {
        case 0x0000: {
          // xtrb3
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_xtrb3;
          return 2;
        } break;
        case 0x0001: {
          // xtrb2
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_xtrb2;
          return 2;
        } break;
        case 0x0002: {
          // xtrb1
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_xtrb1;
          return 2;
        } break;
        case 0x0003: {
          // xtrb0
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_xtrb0;
          return 2;
        } break;
        case 0x0004: {
          // zextb
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_zextb;
          return 2;
        } break;
        case 0x0005: {
          // sextb
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_sextb;
          return 2;
        } break;
        case 0x0006: {
          // zexth
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_zexth;
          return 2;
        } break;
        case 0x0007: {
          // sexth
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_sexth;
          return 2;
        } break;
        case 0x0008: {
          // declt
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_declt;
          return 2;
        } break;
        case 0x0009: {
          // tstnbz
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_tstnbz;
          return 2;
        } break;
        case 0x000a: {
          // decgt
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_decgt;
          return 2;
        } break;
        case 0x000b: {
          // decne
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_decne;
          return 2;
        } break;
        case 0x000c: {
          // clrt
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_clrt;
          return 2;
        } break;
        case 0x000d: {
          // clrf
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_clrf;
          return 2;
        } break;
        case 0x000e: {
          // abs
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_abs;
          return 2;
        } break;
        case 0x000f: {
          // not
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_not;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x0100) & 0xfff0) >> 4)
      } break;
      case 0x0002: {
        // movt
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_movt;
        return 2;
      } break;
      case 0x0003: {
        // mult
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_mult;
        return 2;
      } break;
      case 0x0004: {
        // loopt
        make_b(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_loopt;
        return 2;
      } break;
      case 0x0005: {
        // subu
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_subu;
        return 2;
      } break;
      case 0x0006: {
        // addc
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_addc;
        return 2;
      } break;
      case 0x0007: {
        // subc
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_subc;
        return 2;
      } break;
      case 0x000a: {
        // movf
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_movf;
        return 2;
      } break;
      case 0x000b: {
        // lsr
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_lsr;
        return 2;
      } break;
      case 0x000c: {
        // cmphs
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_cmphs;
        return 2;
      } break;
      case 0x000d: {
        // cmplt
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_cmplt;
        return 2;
      } break;
      case 0x000e: {
        // tst
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_tst;
        return 2;
      } break;
      case 0x000f: {
        // cmpne
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_s(cmd.Op2, ((code&0x00f0)>>4));
        cmd.itype = mcore_cmpne;
        return 2;
      } break;
      default: return 0;
      } // switch (((code - 0x0000) & 0xff00) >> 8)
    } break;
    case 0x0001: {
      switch (((code - 0x1000) & 0xfe00) >> 9) {
      case 0x0000: {
        // mfcr
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_c(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_mfcr;
        return 2;
      } break;
      case 0x0001: {
        switch (((code - 0x1200) & 0xff00) >> 8) {
        case 0x0000: {
          // mov
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_mov;
          return 2;
        } break;
        case 0x0001: {
          // bgenr
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_bgenr;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1200) & 0xff00) >> 8)
      } break;
      case 0x0002: {
        switch (((code - 0x1400) & 0xff00) >> 8) {
        case 0x0000: {
          // rsub
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_rsub;
          return 2;
        } break;
        case 0x0001: {
          // ixw
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_ixw;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1400) & 0xff00) >> 8)
      } break;
      case 0x0003: {
        switch (((code - 0x1600) & 0xff00) >> 8) {
        case 0x0000: {
          // and
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_and;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1600) & 0xff00) >> 8)
      } break;
      case 0x0004: {
        // mtcr
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_c(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_mtcr;
        return 2;
      } break;
      case 0x0005: {
        switch (((code - 0x1a00) & 0xff00) >> 8) {
        case 0x0000: {
          // asr
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_asr;
          return 2;
        } break;
        case 0x0001: {
          // lsl
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_lsl;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1a00) & 0xff00) >> 8)
      } break;
      case 0x0006: {
        switch (((code - 0x1c00) & 0xff00) >> 8) {
        case 0x0000: {
          // addu
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_addu;
          return 2;
        } break;
        case 0x0001: {
          // ixh
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_ixh;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1c00) & 0xff00) >> 8)
      } break;
      case 0x0007: {
        switch (((code - 0x1e00) & 0xff00) >> 8) {
        case 0x0000: {
          // or
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_or;
          return 2;
        } break;
        case 0x0001: {
          // andn
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_s(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_andn;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x1e00) & 0xff00) >> 8)
      } break;
      default: return 0;
      } // switch (((code - 0x1000) & 0xfe00) >> 9)
    } break;
    case 0x0002: {
      switch (((code - 0x2000) & 0xfe00) >> 9) {
      case 0x0000: {
        // addi
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_addi;
        return 2;
      } break;
      case 0x0001: {
        // cmplti
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_cmplti;
        return 2;
      } break;
      case 0x0002: {
        // subi
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_subi;
        return 2;
      } break;
      case 0x0004: {
        // rsubi
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_rsubi;
        return 2;
      } break;
      case 0x0005: {
        // cmpnei
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_cmpnei;
        return 2;
      } break;
      case 0x0006: {
        switch (((code - 0x2c00) & 0xff00) >> 8) {
        case 0x0000: {
          switch (((code - 0x2c00) & 0xff80) >> 7) {
          case 0x0000: {
            switch (((code - 0x2c00) & 0xfff0) >> 4) {
            case 0x0000: {
              // bmaski
              make_r(cmd.Op1, ((code&0x000f)>>0));
              cmd.itype = mcore_bmaski;
              return 2;
            } break;
            case 0x0001: {
              // divu
              make_r(cmd.Op1, ((code&0x000f)>>0));
              cmd.itype = mcore_divu;
              return 2;
            } break;
            default: return 0;
            } // switch (((code - 0x2c00) & 0xfff0) >> 4)
          } break;
          case 0x0001: {
            // bmaski_0
            make_r(cmd.Op1, ((code&0x000f)>>0));
            make_i(cmd.Op2, ((code&0x0070)>>4));
            cmd.itype = mcore_bmaski_0;
            return 2;
          } break;
          default: return 0;
          } // switch (((code - 0x2c00) & 0xff80) >> 7)
        } break;
        case 0x0001: {
          // bmaski_1
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_bmaski_1;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x2c00) & 0xff00) >> 8)
      } break;
      case 0x0007: {
        // andi
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_andi;
        return 2;
      } break;
      default: return 0;
      } // switch (((code - 0x2000) & 0xfe00) >> 9)
    } break;
    case 0x0003: {
      switch (((code - 0x3000) & 0xfe00) >> 9) {
      case 0x0000: {
        // bclri
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_bclri;
        return 2;
      } break;
      case 0x0001: {
        switch (((code - 0x3200) & 0xff00) >> 8) {
        case 0x0000: {
          switch (((code - 0x3200) & 0xff80) >> 7) {
          case 0x0000: {
            switch (((code - 0x3210) & 0xfff0) >> 4) {
            case 0x0000: {
              // divs
              make_r(cmd.Op1, ((code&0x000f)>>0));
              cmd.itype = mcore_divs;
              return 2;
            } break;
            case 0x0006: {
              // bgeni
              make_r(cmd.Op1, ((code&0x000f)>>0));
              cmd.itype = mcore_bgeni;
              return 2;
            } break;
            default: return 0;
            } // switch (((code - 0x3210) & 0xfff0) >> 4)
          } break;
          case 0x0001: {
            // bgeni_0
            make_r(cmd.Op1, ((code&0x000f)>>0));
            make_i(cmd.Op2, ((code&0x0070)>>4));
            cmd.itype = mcore_bgeni_0;
            return 2;
          } break;
          default: return 0;
          } // switch (((code - 0x3200) & 0xff80) >> 7)
        } break;
        case 0x0001: {
          // bgeni_1
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x00f0)>>4));
          cmd.itype = mcore_bgeni_1;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x3200) & 0xff00) >> 8)
      } break;
      case 0x0002: {
        // bseti
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_bseti;
        return 2;
      } break;
      case 0x0003: {
        // btsti
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x01f0)>>4));
        cmd.itype = mcore_btsti;
        return 2;
      } break;
      case 0x0004: {
        switch (((code - 0x3800) & 0xfff0) >> 4) {
        case 0x0000: {
          // xsr
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_xsr;
          return 2;
        } break;
        default: {
          // rotli
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x01f0)>>4));
          cmd.itype = mcore_rotli;
          return 2;
        } break;
        } // switch (((code - 0x3800) & 0xfff0) >> 4)
      } break;
      case 0x0005: {
        switch (((code - 0x3a00) & 0xfff0) >> 4) {
        case 0x0000: {
          // asrc
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_asrc;
          return 2;
        } break;
        default: {
          // asri
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x01f0)>>4));
          cmd.itype = mcore_asri;
          return 2;
        } break;
        } // switch (((code - 0x3a00) & 0xfff0) >> 4)
      } break;
      case 0x0006: {
        switch (((code - 0x3c00) & 0xfff0) >> 4) {
        case 0x0000: {
          // lslc
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_lslc;
          return 2;
        } break;
        default: {
          // lsli
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x01f0)>>4));
          cmd.itype = mcore_lsli;
          return 2;
        } break;
        } // switch (((code - 0x3c00) & 0xfff0) >> 4)
      } break;
      case 0x0007: {
        switch (((code - 0x3e00) & 0xfff0) >> 4) {
        case 0x0000: {
          // lsrc
          make_r(cmd.Op1, ((code&0x000f)>>0));
          cmd.itype = mcore_lsrc;
          return 2;
        } break;
        default: {
          // lsri
          make_r(cmd.Op1, ((code&0x000f)>>0));
          make_i(cmd.Op2, ((code&0x01f0)>>4));
          cmd.itype = mcore_lsri;
          return 2;
        } break;
        } // switch (((code - 0x3e00) & 0xfff0) >> 4)
      } break;
      default: return 0;
      } // switch (((code - 0x3000) & 0xfe00) >> 9)
    } break;
    case 0x0004: {
      switch (((code - 0x4000) & 0xf300) >> 8) {
      case 0x0000: {
        // h_exec
        FILL DIS SHIT IN YO'SEF
        cmd.itype = mcore_h_exec;
        return 2;
      } break;
      case 0x0001: {
        switch (((code - 0x4100) & 0xf380) >> 7) {
        case 0x0000: {
          // h_ret
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_ret;
          return 2;
        } break;
        case 0x0001: {
          // h_call
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_call;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x4100) & 0xf380) >> 7)
      } break;
      case 0x0002: {
        switch (((code - 0x4200) & 0xf380) >> 7) {
        case 0x0000: {
          // h_ld
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_ld;
          return 2;
        } break;
        case 0x0001: {
          // h_st
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_st;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x4200) & 0xf380) >> 7)
      } break;
      case 0x0003: {
        switch (((code - 0x4300) & 0xf380) >> 7) {
        case 0x0000: {
          // h_ld.h
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_ld.h;
          return 2;
        } break;
        case 0x0001: {
          // h_st.h
          FILL DIS SHIT IN YO'SEF
          cmd.itype = mcore_h_st.h;
          return 2;
        } break;
        default: return 0;
        } // switch (((code - 0x4300) & 0xf380) >> 7)
      } break;
      default: return 0;
      } // switch (((code - 0x4000) & 0xf300) >> 8)
    } break;
    case 0x0006: {
      switch (((code - 0x6000) & 0xf800) >> 11) {
      case 0x0000: {
        // movi
        make_r(cmd.Op1, ((code&0x000f)>>0));
        make_i(cmd.Op2, ((code&0x07f0)>>4));
        cmd.itype = mcore_movi;
        return 2;
      } break;
      default: return 0;
      } // switch (((code - 0x6000) & 0xf800) >> 11)
    } break;
    case 0x0007: {
      switch (((code - 0x7000) & 0xff00) >> 8) {
      case 0x0000: {
        // jmpi
        make_d(cmd.Op1, ((code&0x00ff)>>0));
        cmd.itype = mcore_jmpi;
        return 2;
      } break;
      case 0x000f: {
        // jsri
        make_d(cmd.Op1, ((code&0x00ff)>>0));
        cmd.itype = mcore_jsri;
        return 2;
      } break;
      default: {
        // lrw
        make_d(cmd.Op1, ((code&0x00ff)>>0));
        make_z(cmd.Op2, ((code&0x0f00)>>8));
        cmd.itype = mcore_lrw;
        return 2;
      } break;
      } // switch (((code - 0x7000) & 0xff00) >> 8)
    } break;
    case 0x0008: {
      // ld
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_ld;
      return 2;
    } break;
    case 0x0009: {
      // st
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_st;
      return 2;
    } break;
    case 0x000a: {
      // ld.b
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_ld.b;
      return 2;
    } break;
    case 0x000b: {
      // st.b
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_st.b;
      return 2;
    } break;
    case 0x000c: {
      // ld.h
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_ld.h;
      return 2;
    } break;
    case 0x000d: {
      // st.h
      make_r(cmd.Op1, ((code&0x0f00)>>8));
      make_displ(cmd.Op2, ((code&0x000f)>>0), ((code&0x00f0)>>4));
      cmd.itype = mcore_st.h;
      return 2;
    } break;
    case 0x000e: {
      switch (((code - 0xe000) & 0xf800) >> 11) {
      case 0x0000: {
        // bt
        make_d(cmd.Op1, ((code&0x07ff)>>0));
        cmd.itype = mcore_bt;
        return 2;
      } break;
      case 0x0001: {
        // bf
        make_d(cmd.Op1, ((code&0x07ff)>>0));
        cmd.itype = mcore_bf;
        return 2;
      } break;
      default: return 0;
      } // switch (((code - 0xe000) & 0xf800) >> 11)
    } break;
    case 0x000f: {
      switch (((code - 0xf000) & 0xf800) >> 11) {
      case 0x0000: {
        // br
        make_d(cmd.Op1, ((code&0x07ff)>>0));
        cmd.itype = mcore_br;
        return 2;
      } break;
      case 0x0001: {
        // bsr
        make_d(cmd.Op1, ((code&0x07ff)>>0));
        cmd.itype = mcore_bsr;
        return 2;
      } break;
      default: return 0;
      } // switch (((code - 0xf000) & 0xf800) >> 11)
    } break;
    default: return 0;
    } // switch (((code - 0x0000) & 0xf000) >> 12)
